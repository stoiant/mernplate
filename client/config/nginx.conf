# For PROD you have to change instances of localhost with your domain name
# For the certbot to work you have to disale SSL redirect
server {
    listen 80;
    listen [::]:80;
    server_name localhost www.localhost;

    location ~ /.well-known/acme-challenge {
        allow all;
        root /var/www/certbot;
    }

    location / {
        # ssl redirect
        rewrite ^ https://$host$request_uri? permanent;
    }
}

# Current design is not ideal and uses an iframe to proxy the logs, this will
# have to be changed by using a different nginx instance on the log.io host
server {
    listen 3005 ssl http2;
    listen [::]:3005 ssl http2;
    server_name thedemo.dev www.thedemo.dev;

    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/thedemo.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/thedemo.dev/privkey.pem;

    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        proxy_buffering off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://log.io:6688;
        proxy_redirect default;
        proxy_http_version 1.1;
        proxy_set_header Content-Security-Policy "default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;";
    }
}

# Current design is not ideal and uses an iframe to proxy the api calls, this will
# have to be changed by using a different nginx instance on the server host
server {
    listen 3007 ssl http2;
    listen [::]:3007 ssl http2;
    server_name thedemo.dev www.thedemo.dev;

    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/thedemo.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/thedemo.dev/privkey.pem;

    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        # proxy_buffering off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://server:3001;
        proxy_redirect default;
        proxy_http_version 1.1;
        proxy_set_header Content-Security-Policy "default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;";
    }
}

# Current design is not ideal and uses an iframe to proxy the node-dash, this will
# have to be changed by using a different nginx instance on the server host
server {
    listen 3009 ssl http2;
    listen [::]:3009 ssl http2;
    server_name thedemo.dev www.thedemo.dev;

    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/thedemo.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/thedemo.dev/privkey.pem;

    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        proxy_buffering off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://server:3003;
        proxy_redirect default;
        proxy_http_version 1.1;
        proxy_set_header Content-Security-Policy "default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;";
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name localhost www.localhost;

    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/localhost/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/localhost/privkey.pem;

    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        # used in order for react-router to work when loading the page using a link
        autoindex on;
        set $fallback_file /index.html;
        if ($http_accept !~ text/html) {
            set $fallback_file /null;
        }
        if ($uri ~ /$) {
            set $fallback_file /null;
        }
        try_files $uri $fallback_file;
    }
}
